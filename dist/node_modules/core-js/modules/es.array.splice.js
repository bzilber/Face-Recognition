'use strict';import $ from"/node_modules/core-js/internals/export.js";import toAbsoluteIndex from"/node_modules/core-js/internals/to-absolute-index.js";import toInteger from"/node_modules/core-js/internals/to-integer.js";import toLength from"/node_modules/core-js/internals/to-length.js";import toObject from"/node_modules/core-js/internals/to-object.js";import arraySpeciesCreate from"/node_modules/core-js/internals/array-species-create.js";import createProperty from"/node_modules/core-js/internals/create-property.js";import arrayMethodHasSpeciesSupport from"/node_modules/core-js/internals/array-method-has-species-support.js";import arrayMethodUsesToLength from"/node_modules/core-js/internals/array-method-uses-to-length.js";var HAS_SPECIES_SUPPORT=arrayMethodHasSpeciesSupport("splice"),USES_TO_LENGTH=arrayMethodUsesToLength("splice",{ACCESSORS:!0,0:0,1:2}),max=Math.max,min=Math.min,MAX_SAFE_INTEGER=9007199254740991,MAXIMUM_ALLOWED_LENGTH_EXCEEDED="Maximum allowed length exceeded";$({target:"Array",proto:!0,forced:!HAS_SPECIES_SUPPORT||!USES_TO_LENGTH},{splice:function splice(start,deleteCount){var insertCount,actualDeleteCount,A,k,from,to,O=toObject(this),len=toLength(O.length),actualStart=toAbsoluteIndex(start,len),argumentsLength=arguments.length;if(0===argumentsLength?insertCount=actualDeleteCount=0:1===argumentsLength?(insertCount=0,actualDeleteCount=len-actualStart):(insertCount=argumentsLength-2,actualDeleteCount=min(max(toInteger(deleteCount),0),len-actualStart)),len+insertCount-actualDeleteCount>MAX_SAFE_INTEGER)throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);for(A=arraySpeciesCreate(O,actualDeleteCount),k=0;k<actualDeleteCount;k++)from=actualStart+k,from in O&&createProperty(A,k,O[from]);if(A.length=actualDeleteCount,insertCount<actualDeleteCount){for(k=actualStart;k<len-actualDeleteCount;k++)from=k+actualDeleteCount,to=k+insertCount,from in O?O[to]=O[from]:delete O[to];for(k=len;k>len-actualDeleteCount+insertCount;k--)delete O[k-1]}else if(insertCount>actualDeleteCount)for(k=len-actualDeleteCount;k>actualStart;k--)from=k+actualDeleteCount-1,to=k+insertCount-1,from in O?O[to]=O[from]:delete O[to];for(k=0;k<insertCount;k++)O[k+actualStart]=arguments[k+2];return O.length=len-actualDeleteCount+insertCount,A}});